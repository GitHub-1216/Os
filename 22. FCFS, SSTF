22.	Consider the order of request for cylinder access of the disk is - (98, 183, 37, 122, 14, 124, 65, 67) and current position of Read/Write head is: 53. Find the total head movements to access the data on the cylinder using following disk scheduling algorithms:
1)	FCFS
2)	Shortest Seek Time First (SSTF)


#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define NUM_REQUESTS 8

// Function to calculate the total head movements using FCFS algorithm
int fcfs(int requests[], int head_position) {
    int total_head_movements = 0;
    int current_position = head_position;

    for (int i = 0; i < NUM_REQUESTS; i++) {
        total_head_movements += abs(requests[i] - current_position);
        current_position = requests[i];
    }

    return total_head_movements;
}

// Function to find the index of the nearest request from the current head position
int find_nearest_request(int requests[], int head_position, int visited[]) {
    int min_distance = INT_MAX;
    int min_index = -1;

    for (int i = 0; i < NUM_REQUESTS; i++) {
        if (!visited[i]) {
            int distance = abs(requests[i] - head_position);
            if (distance < min_distance) {
                min_distance = distance;
                min_index = i;
            }
        }
    }

    return min_index;
}

// Function to calculate the total head movements using SSTF algorithm
int sstf(int requests[], int head_position) {
    int total_head_movements = 0;
    int current_position = head_position;
    int visited[NUM_REQUESTS] = {0}; // Initialize all requests as not visited

    for (int i = 0; i < NUM_REQUESTS; i++) {
        int nearest_index = find_nearest_request(requests, current_position, visited);
        visited[nearest_index] = 1; // Mark the nearest request as visited
        total_head_movements += abs(requests[nearest_index] - current_position);
        current_position = requests[nearest_index];
    }

    return total_head_movements;
}

int main() {
    int requests[NUM_REQUESTS] = {98, 183, 37, 122, 14, 124, 65, 67};
    int head_position = 53;

    int total_head_movements_fcfs = fcfs(requests, head_position);
    printf("Total head movements using FCFS: %d\n", total_head_movements_fcfs);

    int total_head_movements_sstf = sstf(requests, head_position);
    printf("Total head movements using SSTF: %d\n", total_head_movements_sstf);

    return 0;
}
