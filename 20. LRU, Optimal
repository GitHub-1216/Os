#include <stdio.h>
#include <stdbool.h>

#define NUM_FRAMES 3
#define NUM_PAGES 20

// Function to find the index of the page that will be referenced farthest in the future
int find_future_index(int pages[], int start, int frame[], int frame_size) {
    int farthest = start;
    int farthest_index = -1;
    for (int i = 0; i < frame_size; i++) {
        bool found = false;
        for (int j = start; j < NUM_PAGES; j++) {
            if (pages[j] == frame[i]) {
                if (j > farthest) {
                    farthest = j;
                    farthest_index = i;
                    found = true;
                    break;
                }
            }
        }
        if (!found) {
            return i;
        }
    }
    return farthest_index;
}

// Least Recently Used (LRU) Algorithm
int lru(int page_references[]) {
    int frame[NUM_FRAMES] = { -1 };
    int page_faults = 0;

    for (int i = 0; i < NUM_PAGES; i++) {
        bool page_found = false;
        for (int j = 0; j < NUM_FRAMES; j++) {
            if (frame[j] == page_references[i]) {
                page_found = true;
                // Move the page to the end of the list to mark it as the most recently used
                for (int k = j; k < NUM_FRAMES - 1; k++) {
                    frame[k] = frame[k + 1];
                }
                frame[NUM_FRAMES - 1] = page_references[i];
                break;
            }
        }
        if (!page_found) {
            page_faults++;
            if (frame[NUM_FRAMES - 1] == -1) {
                // If there's space in the frame, add the page
                for (int j = 0; j < NUM_FRAMES; j++) {
                    if (frame[j] == -1) {
                        frame[j] = page_references[i];
                        break;
                    }
                }
            } else {
                // Replace the least recently used page
                for (int j = 0; j < NUM_FRAMES - 1; j++) {
                    frame[j] = frame[j + 1];
                }
                frame[NUM_FRAMES - 1] = page_references[i];
            }
        }
    }

    return page_faults;
}

// Optimal Algorithm
int optimal(int page_references[]) {
    int frame[NUM_FRAMES] = { -1 };
    int page_faults = 0;

    for (int i = 0; i < NUM_PAGES; i++) {
        bool page_found = false;
        for (int j = 0; j < NUM_FRAMES; j++) {
            if (frame[j] == page_references[i]) {
                page_found = true;
                break;
            }
        }
        if (!page_found) {
            page_faults++;
            if (frame[NUM_FRAMES - 1] == -1) {
                // If there's space in the frame, add the page
                for (int j = 0; j < NUM_FRAMES; j++) {
                    if (frame[j] == -1) {
                        frame[j] = page_references[i];
                        break;
                    }
                }
            } else {
                // Find the page that will be referenced farthest in the future and replace it
                int future_index = find_future_index(page_references, i + 1, frame, NUM_FRAMES);
                frame[future_index] = page_references[i];
            }
        }
    }

    return page_faults;
}

int main() {
    int page_references[NUM_PAGES] = {7, 1, 0, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};

    int lru_faults = lru(page_references);
    int optimal_faults = optimal(page_references);

    printf("Total page faults using LRU algorithm: %d\n", lru_faults);
    printf("Total page faults using Optimal algorithm: %d\n", optimal_faults);

    return 0;
}
