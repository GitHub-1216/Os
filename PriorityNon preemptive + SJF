#include <stdio.h>
#include <limits.h>

struct Process {
    int id;
    int burstTime;
    int priority; // For Priority Scheduling
    int waitingTime;
    int turnaroundTime;
};

void priorityNonPreemptive(struct Process processes[], int n) {
    int totalTime = 0;
    float avgWaitingTime = 0, avgTurnaroundTime = 0;

    // Sort processes based on priority (ascending order)
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (processes[j].priority > processes[j + 1].priority) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time
    processes[0].waitingTime = 0;
    for (int i = 1; i < n; ++i) {
        processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
    }
    for (int i = 0; i < n; ++i) {
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        avgWaitingTime += processes[i].waitingTime;
        avgTurnaroundTime += processes[i].turnaroundTime;
        totalTime += processes[i].burstTime;
    }

    // Calculate averages
    avgWaitingTime /= n;
    avgTurnaroundTime /= n;

    // Display results
    printf("\nPriority (Non-preemptive) Scheduling\n");
    printf("Process  Burst Time  Priority  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; ++i) {
        printf("   %d           %d            %d          %d              %d\n",
               processes[i].id, processes[i].burstTime, processes[i].priority,
               processes[i].waitingTime, processes[i].turnaroundTime);
    }
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
}

void sjf(struct Process processes[], int n) {
    int totalTime = 0;
    float avgWaitingTime = 0, avgTurnaroundTime = 0;

    // Sort processes based on burst time (ascending order)
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Calculate waiting time and turnaround time
    processes[0].waitingTime = 0;
    for (int i = 1; i < n; ++i) {
        processes[i].waitingTime = processes[i - 1].waitingTime + processes[i - 1].burstTime;
    }
    for (int i = 0; i < n; ++i) {
        processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        avgWaitingTime += processes[i].waitingTime;
        avgTurnaroundTime += processes[i].turnaroundTime;
        totalTime += processes[i].burstTime;
    }

    // Calculate averages
    avgWaitingTime /= n;
    avgTurnaroundTime /= n;

    // Display results
    printf("\nShortest Job First (SJF) Scheduling\n");
    printf("Process  Burst Time  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < n; ++i) {
        printf("   %d           %d            %d              %d\n",
               processes[i].id, processes[i].burstTime,
               processes[i].waitingTime, processes[i].turnaroundTime);
    }
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; ++i) {
        processes[i].id = i + 1;
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        printf("Enter priority for process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
    }

    // Perform Priority (Non-preemptive) Scheduling
    priorityNonPreemptive(processes, n);

    // Perform Shortest Job First (SJF) Scheduling
    sjf(processes, n);

    return 0;
}
