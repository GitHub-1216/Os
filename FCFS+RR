#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

struct Process {
    int id;
    int burstTime;
    int waitingTime;
    int turnaroundTime;
    int arrivalTime;
    int remainingTime;
    int responseTime;
};

void input(struct Process *p, int n) {
    for (int i = 0; i < n; i++) {
        printf("\nEnter arrival time and burst time for process %d:\n", i + 1);
        scanf("%d %d", &p[i].arrivalTime, &p[i].burstTime);
        p[i].id = i + 1;
        p[i].remainingTime = p[i].burstTime;
        p[i].responseTime = -1;  // -1 indicates response time not yet set
    }
}

void fcfs(struct Process *p, int n) {
    int sum = 0;
    sum = sum + p[0].arrivalTime;
    for (int i = 0; i < n; i++) {
        sum = sum + p[i].burstTime;
        p[i].turnaroundTime = sum - p[i].arrivalTime;
        p[i].waitingTime = p[i].turnaroundTime - p[i].burstTime;
    }
}

void displayFCFS(struct Process *p, int n) {
    float avgWaitingTime = 0, avgTurnaroundTime = 0;

    printf("\nProcess  Arrival Time  Burst Time  Waiting Time  Turnaround Time  Response Time\n");
    for (int i = 0; i < n; i++) {
        printf("   %d           %d            %d          %d              %d               %d\n",
               p[i].id, p[i].arrivalTime, p[i].burstTime,
               p[i].waitingTime, p[i].turnaroundTime, p[i].responseTime);

        avgWaitingTime += p[i].waitingTime;
        avgTurnaroundTime += p[i].turnaroundTime;
    }

    avgWaitingTime /= n;
    avgTurnaroundTime /= n;

    printf("\nAverage Waiting Time: %.2f", avgWaitingTime);
    printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
}

void roundRobin(struct Process processes[], int numProcesses, int timeQuantum) {
    int currentTime = 0;
    int remainingProcesses = numProcesses;

    while (remainingProcesses > 0) {
        for (int i = 0; i < numProcesses; ++i) {
            if (processes[i].remainingTime > 0) {
                int executionTime = (processes[i].remainingTime < timeQuantum) ? processes[i].remainingTime : timeQuantum;

                if (processes[i].responseTime == -1) {
                    processes[i].responseTime = currentTime;
                }

                processes[i].remainingTime -= executionTime;
                currentTime += executionTime;

                if (processes[i].remainingTime == 0) {
                    processes[i].turnaroundTime = currentTime;
                    processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
                    remainingProcesses--;
                }
            }
        }
    }
}

void displayRoundRobin(struct Process processes[], int numProcesses) {
    float avgWaitingTime = 0, avgTurnaroundTime = 0;

    printf("\nProcess  Burst Time  Waiting Time  Turnaround Time\n");
    for (int i = 0; i < numProcesses; ++i) {
        printf("   %d           %d            %d              %d\n",
               processes[i].id, processes[i].burstTime,
               processes[i].waitingTime, processes[i].turnaroundTime);

        avgWaitingTime += processes[i].waitingTime;
        avgTurnaroundTime += processes[i].turnaroundTime;
    }

    avgWaitingTime /= numProcesses;
    avgTurnaroundTime /= numProcesses;

    printf("\nAverage Waiting Time: %.2f", avgWaitingTime);
    printf("\nAverage Turnaround Time: %.2f\n", avgTurnaroundTime);
}

int main() {
    int n, timeQuantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESSES];

    input(processes, n);

    // FCFS
    fcfs(processes, n);
    printf("\n\nFCFS Scheduling\n");
    displayFCFS(processes, n);

    // Round Robin
    printf("\n\nRound Robin Scheduling\n");
    printf("Enter the time quantum: ");
    scanf("%d", &timeQuantum);
    roundRobin(processes, n, timeQuantum);
    displayRoundRobin(processes, n);

    return 0;
}
